name: Lighthouse Analysis

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  lighthouse:
    name: Lighthouse
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build site
        run: pnpm build

      # Start server before running Lighthouse
      - name: Install serve
        run: npm install -g serve

      - name: Start server
        run: serve -s dist -l 8080 &
        
      # Wait for server to be ready
      - name: Wait for server
        run: sleep 3

      - name: Run Lighthouse CI
        id: lhci
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:8080/
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
          configPath: './lighthouserc.cjs'
          serverBaseUrl: ${{ secrets.LHCI_SERVER_URL }}
          serverToken: ${{ secrets.LHCI_TOKEN }}

      - name: Format Lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const links = ${{ steps.lhci.outputs.links }}
            const results = ${{ steps.lhci.outputs.manifest }}
            
            let summaryRows = [];
            let detailRows = [];
            
            for (const [urlIndex, url] of Object.entries(results)) {
              const urlName = url.url.replace(/^https?:\/\//, '');
              const summary = url.summary;
              
              // Fix the property access for hyphenated properties
              const performance = summary.performance;
              const accessibility = summary.accessibility;
              const bestPractices = summary["best-practices"]; // Use quotes around the key
              const seo = summary.seo;
              
              summaryRows.push(`| ${urlName} | ${performance} | ${accessibility} | ${bestPractices} | ${seo} |`);
              
              // Add details with emoji indicators
              const getScoreEmoji = (score) => {
                if (score >= 0.9) return 'ðŸŸ¢';
                if (score >= 0.5) return 'ðŸŸ ';
                return 'ðŸ”´';
              };
              
              detailRows.push(`### ${urlName}`);
              detailRows.push(`- Performance: ${getScoreEmoji(performance)} ${Math.round(performance * 100)}`);
              detailRows.push(`- Accessibility: ${getScoreEmoji(accessibility)} ${Math.round(accessibility * 100)}`);
              detailRows.push(`- Best Practices: ${getScoreEmoji(bestPractices)} ${Math.round(bestPractices * 100)}`);
              detailRows.push(`- SEO: ${getScoreEmoji(seo)} ${Math.round(seo * 100)}`);
              detailRows.push('');
            }
            
            const report = links.lhr[0]; // Use the first report URL
            
            const comment = `## ðŸš¦ Lighthouse Report

            ### Summary
            | URL | Performance | Accessibility | Best Practices | SEO |
            | --- | ----------- | ------------ | -------------- | --- |
            ${summaryRows.join('\n')}
            
            ### Details
            ${detailRows.join('\n')}
            
            [ðŸ“Š View Full Report](${report})
            `;
            
            core.setOutput('comment', comment);

      - name: Add or update PR comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comment }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 